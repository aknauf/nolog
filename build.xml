<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" default="dist" name="unlog">
    <property file="release.properties" />
    <property file="${user.home}/unlog.properties" />

    <property name="project.dir" location="${ant.file}/.."/>
    <property name="dev.root" value="${project.dir}/.."/>
    <property name="build.root" value="${dev.root}/BUILD"/>
    <property name="dist.root" value="${dev.root}/DIST"/>

    <property name="lib.dir" value="${dev.root}/lib"/>
    <property name="dist.dir" value="${dist.root}/${ant.project.name}"/>
    <property name="build.dir" value="${build.root}/${ant.project.name}"/>

    <property name="ivy.install.version" value="2.3.0"/>
    <property name="ivy.jar.dir" value="${build.dir}/ivy"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <property name="snapshot.url" value="https://oss.sonatype.org/content/repositories/snapshots"/>
    <property name="staging.url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2"/>

    <macrodef name="echocp">
        <attribute name="classpathid"/>
        <sequential>
            <pathconvert refid="@{classpathid}" property="@{classpathid}_txt"/>
            <echo>CLASSPATH: ${@{classpathid}_txt}</echo>
        </sequential>
    </macrodef>

    <macrodef name="compile.java">
        <attribute name="src"/>
        <attribute name="dest"/>
        <attribute name="classpathid"/>
        <attribute name="debug" default="true"/>
        <attribute name="optimize" default="false"/>
        <sequential>
            <mkdir dir="@{dest}"/>

            <echocp classpathid="@{classpathid}"/>

            <javac debug="@{debug}" optimize="@{optimize}" destdir="@{dest}" source="6" includeantruntime="false">
                <src location="@{src}"/>
                <classpath refid="@{classpathid}"/>
            </javac>
            <copy todir="@{dest}">
                <fileset dir="@{src}" excludes="**/*.java"/>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="git">
        <attribute name="command"/>
        <attribute name="dir" default=""/>
        <element name="args" optional="true"/>
        <sequential>
            <echo message="git @{command}"/>
            <exec executable="git" dir="@{dir}" failonerror="true">
                <arg value="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="mvn.fetch">
        <attribute name="org"/>
        <attribute name="artifact"/>
        <attribute name="version"/>
        <sequential>
            <get src="http://repo1.maven.org/maven2/@{org}/@{artifact}/@{version}/@{artifact}-@{version}.jar"
                 dest="${ivy.jar.dir}/@{artifact}-@{version}.jar" usetimestamp="true"/>
        </sequential>
    </macrodef>

    <target name="ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <!--
         download Ivy from web site so that it can be used even without any special installation
        -->
        <echo message="installing ivy..."/>
        <mvn.fetch org="org/apache/ivy" artifact="ivy" version="2.3.0"/>
        <mvn.fetch org="org/bouncycastle" artifact="bcprov-jdk16" version="1.46"/>
        <mvn.fetch org="org/bouncycastle" artifact="bcpg-jdk16" version="1.46"/>
        <mvn.fetch org="commons-httpclient" artifact="commons-httpclient" version="3.1"/>
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <echocp classpathid="ivy.lib.path"/>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>

        <ivy:configure file="${project.dir}/ivy/ivysettings.xml"/>
    </target>

    <target name="production.classes">

        <property name="production.src.dir" value="src/java"/>
        <property name="production.classes.dir" value="${build.dir}/production/classes"/>

        <!-- Normally, production libs would go here, but there aren't any.  It needs to be there for the tests though. -->
        <path id="production.compilation.classpath"/>
        <compile.java
                src="${production.src.dir}"
                dest="${production.classes.dir}"
                classpathid="production.compilation.classpath"
                />
        <fileset id="production.classes.fileset" dir="${production.classes.dir}"/>
        <path id="production.classpath" location="${production.classes.dir}"/>
    </target>

    <target name="test.classes" depends="production.classes,ivy">

        <property name="test.src.dir" value="src/test"/>
        <property name="test.classes.dir" value="${build.dir}/test/classes"/>
        <ivy:cachepath pathid="test.dependencies.classpath" conf="test"/>
        <path id="test.compilation.classpath">
            <path refid="production.classpath"/>
            <path refid="test.dependencies.classpath"/>
        </path>
        <compile.java
                src="${test.src.dir}"
                dest="${test.classes.dir}"
                classpathid="test.compilation.classpath"
                />
        <path id="test.classpath">
            <path refid="test.compilation.classpath"/>
            <path location="${test.classes.dir}"/>
        </path>
    </target>

    <target name="test" depends="test.classes">

        <property name="test.reports.dir" location="${build.dir}/test/reports"/>
        <mkdir dir="${test.reports.dir}"/>
        <junit printsummary="yes" haltonfailure="true" haltonerror="true" fork="true"
               forkmode="perBatch" dir="${basedir}" maxmemory="128m">
            <classpath>
                <path refid="test.classpath"/>
            </classpath>

            <formatter type="brief"/>

            <batchtest fork="true" todir="${test.reports.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="javadoc.jar" depends="production.classes">
        <property name="javadoc.dir" location="${build.dir}/javadoc"/>
        <mkdir dir="${javadoc.dir}"/>
        <javadoc sourcepath="${production.src.dir}" destdir="${javadoc.dir}">
            <classpath refid="production.compilation.classpath"/>
        </javadoc>
        <property name="javadoc.jarfile" value="${dist.dir}/${ant.project.name}-javadoc.jar"/>
        <jar destfile="${javadoc.jarfile}">
            <fileset dir="${javadoc.dir}"/>
        </jar>
    </target>

    <target name="sources.jar">
        <property name="sources.jarfile" value="${dist.dir}/${ant.project.name}-sources.jar"/>
        <jar destfile="${sources.jarfile}">
            <fileset dir="${production.src.dir}"/>
        </jar>
    </target>

    <target name="dist" depends="production.classes, test, javadoc.jar, sources.jar, pom">
        <property name="jarfile" value="${dist.dir}/${ant.project.name}.jar"/>
        <jar destfile="${jarfile}">
            <fileset refid="production.classes.fileset"/>
        </jar>
        <path id="dist.classpath">
            <pathelement location="${jarfile}"/>
        </path>
    </target>

    <target name="pom" depends="ivy">
        <property name="ivy.pom.name" value="${ant.project.name}"/>
        <property name="ivy.pom.version" value="${built.version}"/>
        <property name="ivy.pom.packaging" value="jar"/>
        <property name="scm.url" value="https://github.com/unlog/unlog.git"/>
        <property name="scm.connection" value="${scm.url}"/>

        <ivy:makepom ivyfile="ivy.xml"
                     templatefile="ivy/pom-template.xml"
                     pomfile="${dist.dir}/${ant.project.name}.pom"
                     conf="default"
                     artifactpackaging="${ivy.pom.packaging}"
                     description="UnLog - An (almost) invisible logging framework."
                >
            <ivy:mapping conf="default" scope="compile"/>
            <ivy:mapping conf="test" scope="test"/>
        </ivy:makepom>
    </target>

    <target name="tag-snapshot">
        <buildnumber/>
        <property name="built.version" value="${project.version.working}-${build.number}-SNAPSHOT"/>

        <git command="tag">
            <args>
                <arg value="-a"/>
                <arg value="v${built.version}"/>
                <arg value="-m"/>
                <arg value="Snapshot ${built.version}"/>
            </args>
        </git>

        <git command="push">
            <args>
                <arg value="origin"/>
                <arg value="v${built.version}"/>
            </args>
        </git>
    </target>

    <target name="snapshot" depends="clean, dist, tag-snapshot">
        <ivy:publish resolver="snapshot" pubrevision="${built.version}" overwrite="true"
                     publishivy="false" forcedeliver="true">
            <ivy:artifacts pattern="${dist.dir}/[artifact](-[classifier]).[ext]"/>
        </ivy:publish>
    </target>

    <target name="tag-release">

        <property name="built.version" value="${project.version.working}"/>

        <git command="tag">
            <args>
                <arg value="-a"/>
                <arg value="v${built.version}"/>
                <arg value="-m"/>
                <arg value="Release ${built.version}"/>
            </args>
        </git>

        <git command="push">
            <args>
                <arg value="origin"/>
                <arg value="v${built.version}"/>
            </args>
        </git>
    </target>

    <target name="release" depends="clean, dist, pom, tag-release">
        <ivy:publish resolver="release" pubrevision="${built.version}" publishivy="false" overwrite="true"
                     forcedeliver="true">
        <ivy:artifacts pattern="${dist.dir}/[artifact](-[classifier]).[ext]"/>
        </ivy:publish>
    </target>

    <target name="clean" depends="clean.build, clean.dist"/>

    <target name="clean.build">
        <echo>Cleaning build dir: ${build.dir}</echo>
        <delete includeemptydirs="true">
            <fileset dir="${build.dir}" erroronmissingdir="false"/>
        </delete>
    </target>

    <target name="clean.dist">
        <echo>Cleaning dist dir: ${dist.dir}</echo>
        <delete includeemptydirs="true">
            <fileset dir="${dist.dir}" erroronmissingdir="false"/>
        </delete>
    </target>

</project>
